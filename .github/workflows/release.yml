name: Release

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - 'wm-*'
  schedule:
    - cron: '0 0 * * *' # Daily at midnight UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ensure-release:
    runs-on: ubuntu-latest
    outputs:
      release-name: ${{ steps.ensure-release.outputs.release-name }}
    steps:
      - name: Create or update release
        id: ensure-release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo="${GITHUB_REPOSITORY}"

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            ref_name="${GITHUB_REF_NAME}"
            title="${ref_name}"
            flags=""
            update_existing=false
          else
            ref_name="nightly"
            title="Nightly"
            notes="Automated nightly build for ${GITHUB_SHA}."
            flags="--notes \"${notes}\" --prerelease"
            update_existing=true
          fi

          if ! gh release view -R "${repo}" "${ref_name}" 2>/dev/null; then
            eval gh release create -R \"${repo}\" \"${ref_name}\" \
              --title \"${title}\" \
              ${flags}
          elif [ "${update_existing}" = true ]; then
            gh release edit -R "${repo}" "${ref_name}" \
              --notes "${notes}"
          fi

          echo "release-name=${ref_name}" >> $GITHUB_OUTPUT

  build:
    name: "build (${{ matrix.gui_target }})"
    needs: [ensure-release]
    outputs:
      app-version: ${{ steps.app-version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-15
            gui_target:  "aarch64-apple-darwin"
            cli_targets: "aarch64-apple-darwin x86_64-apple-darwin"
          - platform: macos-15
            gui_target:  "x86_64-apple-darwin"
          - platform: windows-2025
            cli_targets: "x86_64-pc-windows-msvc"
            gui_target:  "x86_64-pc-windows-msvc"
          - platform: ubuntu-22.04
            cli_targets: "x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-unknown-linux-musl aarch64-unknown-linux-musl"
            gui_target:  "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/bin
          key: ${{ matrix.platform }}

      - name: Install Linux dependencies
        if: startsWith(matrix.platform, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            musl-tools \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Tauri CLI
        shell: bash
        run: |
          # Only install if not already cached
          if ! command -v cargo-tauri &> /dev/null; then
            cargo install tauri-cli --version "=2.8.0" --locked
          else
            echo "cargo-tauri already installed: $(cargo-tauri --version)"
          fi

      - name: Install Apple certificate
        if: startsWith(matrix.platform, 'macos')
        env:
          P12_BASE64: ${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: secret
        run: |
          # Only run if certificate is provided
          if [ -n "$P12_BASE64" ]; then
            # Create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/apple_certificate.p12
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            echo -n "$P12_BASE64" | base64 --decode -o $CERTIFICATE_PATH

            # Create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # Import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH
          fi

      - name: Install targets
        shell: bash
        run: |
          rustup target add "${{ matrix.gui_target }}"

      - name: Build GUI
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.gui_target }}
          tagName: ${{ needs.ensure-release.outputs.release-name }}
          assetNamePattern: "[name]-[arch][ext]"

      - name: Verify GUI notarization (macos)
        if: startsWith(matrix.platform, 'macos')
        shell: bash
        run: |
          app_path="target/${{ matrix.gui_target }}/release/bundle/macos/tidewave.app"
          echo "Verifying $app_path"
          spctl -a -t exec -vvv "$app_path"

      - name: Build CLI binaries
        shell: bash
        if: matrix.cli_targets != ''
        run: |
          for target in ${{ matrix.cli_targets }}; do
            echo "Building CLI for $target"
            rustup target add "$target"

            # Set linker for aarch64 cross-compilation
            if [[ "$target" == "aarch64-unknown-linux-gnu" ]]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            elif [[ "$target" == "aarch64-unknown-linux-musl" ]]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
            fi

            cargo build -p tidewave-cli --release --target $target
          done

      - name: Sign CLI binaries (macos)
        if: startsWith(matrix.platform, 'macos') && matrix.cli_targets != ''
        shell: bash
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          for target in ${{ matrix.cli_targets }}; do
            binary_path="target/$target/release/tidewave"
            zip_path="target/$target/release/tidewave.zip"

            echo "Signing $binary_path"
            codesign --force --sign "$APPLE_SIGNING_IDENTITY" \
              --options runtime \
              --timestamp \
              "$binary_path"

            codesign -vvv --deep --strict "$binary_path"

            echo "Notarizing $binary_path"
            ditto -c -k --keepParent "$binary_path" "$zip_path"

            xcrun notarytool submit "$zip_path" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait
          done

      - name: Sign CLI binaries (windows)
        if: startsWith(matrix.platform, 'windows')
        uses: azure/trusted-signing-action@v0.4.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: ${{ secrets.AZURE_TRUSTED_SIGNING_ACCOUNT_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
          files-folder: ${{ github.workspace }}\target
          files-folder-filter: exe,msi,dll
          files-folder-recurse: true
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Upload CLI binaries
        if: matrix.cli_targets != ''
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_name="${{ needs.ensure-release.outputs.release-name }}"
          for target in ${{ matrix.cli_targets }}; do
            src_path="target/$target/release/tidewave"
            dst_path="tidewave-cli-$target"
            if [[ "${{ matrix.platform }}" = windows* ]]; then
              src_path="$src_path.exe"
              dst_path="$dst_path.exe"
            fi
            cp "$src_path" "$dst_path"
            gh release upload --clobber "$release_name" "$dst_path"
          done
